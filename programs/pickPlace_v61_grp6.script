local dx = 0.0331
local dy = 0.0156
local dz = 0
local rx = 0
local ry = 0
local rz = 0
global points = [
  # p[0, 0, dz, rx, ry, rz],
  # p[0, 2*dy, dz, rx, ry, rz],
  # p[0, 4*dy, dz, rx, ry, rz],
  # p[0, 6*dy, dz, rx, ry, rz],
  # p[0, 8*dy, dz, rx, ry, rz],
  # p[dx, dy, dz, rx, ry, rz],
  # p[dx, 3*dy, dz, rx, ry, rz],
  # p[dx, 5*dy, dz, rx, ry, rz],
  # p[dx, 7*dy, dz, rx, ry, rz],
  # p[dx, 9*dy, dz, rx, ry, rz],
  # p[2*dx, 0, dz, rx, ry, rz],
  # p[2*dx, 2*dy, dz, rx, ry, rz],
  # p[2*dx, 4*dy, dz, rx, ry, rz],
  # p[2*dx, 6*dy, dz, rx, ry, rz],
  # p[2*dx, 8*dy, dz, rx, ry, rz],
  # p[3*dx, dy, dz, rx, ry, rz],
  # p[3*dx, 3*dy, dz, rx, ry, rz],
  # p[3*dx, 5*dy, dz, rx, ry, rz],
  p[3*dx, 7*dy, dz, rx, ry, rz],
  p[3*dx, 9*dy, dz, rx, ry, rz],
  # p[4*dx, 0, dz, rx, ry, rz],
  # p[4*dx, 2*dy, dz, rx, ry, rz],
  # p[4*dx, 4*dy, dz, rx, ry, rz],
  p[4*dx, 6*dy, dz, rx, ry, rz],
  p[4*dx, 8*dy, dz, rx, ry, rz]]

# Corner Points:

points = [
  p[0, 0, dz, rx, ry, rz],  
  p[0, 9*dy, dz, rx, ry, rz],
  p[4*dx, 9*dy, dz, rx, ry, rz],
  p[4*dx, 0, dz, rx, ry, rz]]

local approach_z_offset = 0.08
local pick_reference = p[0,0,0,0.721,-3.06,0.0]
local place_reference = p[0,0,0,2.043,-2.415,0.0]

local pick_x_offset = -0.024
local pick_y_offset = 0.0
local pick_z_height = 0.095

# Gripper Settings
local has_gripper = True
local gripper_close_width = 5.0
local gripper_open_width = 20.0
local gripper_force = 5

# Output Tracking
local outfeed_counter = 0
local outfeed_ids = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
local outfeed_frame = p[-0.18275,-0.28631,0.09722,-1.17756,2.90212,0.0605]
local discard_counter = 0
local discard_ids = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
local discard_frame = p[0.03924,-0.37999,0.08579,-1.18036,2.90255,-0.00834]

# waypoints
local wp_infeed2inspect_1 = p[-0.240,0.134,0.185,2.238,-2.6,-0.034]
local wp_inspect2out_1 = wp_infeed2inspect_1
local wp_inspect2out_2 = p[-0.203,-0.119,0.236,1.23,-3.16,-0.051]
local wp_out2infeed_1 = wp_inspect2out_2

# Inspection
local wp_inspection =  [p[-0.116,0.269,0.15,-1.030,1.151,0.132], 
                        p[-0.112,0.269,0.155,-1.393,0.828,-0.363]]


# Status
global cartridgeID = 0
global cartridgeCount = 0



def pick(pick_point,reference_pose):
  pick_point = p[pick_point[0],pick_point[1],pick_point[2],reference_pose[3],reference_pose[4],reference_pose[5]]
  local p_approach = pick_point
  p_approach[2] = p_approach[2] + approach_z_offset  # Z-offset in base frame
  #popup(str_cat("",p_approach),"DEBUG",blocking=True)
  gripper("OPEN",blocking=False)
  if(get_inverse_kin_has_solution(p_approach)):
    movej(p_approach, a = 1.2, v = 1.0,r=0.01)
    movel(pick_point, a = 1.2, v = 0.25)
    gripper("CLOSE")
    movel(p_approach, a = 1.2, v = 0.25,r=0.01)
    return True
  else:
    popup("Cant reach!","DEBUG",blocking=True)
    return False
  end
end

def pick_fromInfeed(id):
  local p_local = points[id]
  p_local[0] = p_local[0] + pick_x_offset
  p_local[1] = p_local[1] + pick_y_offset
  local p_base = pose_trans(PLOC_pick, p_local)
  p_base[2] = pick_z_height
  return pick(p_base, pick_reference)
end

def place_toOutput(id,inspection_pass):
  if(inspection_pass):
    # place at outfeed
    # increment outfeed counter
    # push_back id to outfeed array    

    local p_local = points[outfeed_counter]
    local p_base = pose_trans(outfeed_frame, p_local)
    p_base[2] = pick_z_height
    place(p_base, place_reference)
    outfeed_ids[outfeed_counter] = id
    outfeed_counter = outfeed_counter + 1
  else:
    # place at discard
    # increment discard counter
    # push_back id to discard array
    
    local p_local = points[discard_counter]
    local p_base = pose_trans(discard_frame, p_local)
    p_base[2] = pick_z_height
    place(p_base, place_reference)
    discard_ids[discard_counter] = id
    discard_counter = discard_counter + 1
  end
end

def place(place_point,reference_pose):
  place_point = p[place_point[0],place_point[1],place_point[2],reference_pose[3],reference_pose[4],reference_pose[5]]
  local p_approach = place_point
  p_approach[2] = p_approach[2] + approach_z_offset  # Z-offset in base frame
  # popup(str_cat("",p_approach),"DEBUG",blocking=True)
  movej(p_approach, a = 1.2, v = 1.0,r=0.01)
  movel(place_point, a = 1.2, v = 0.25)
  gripper("OPEN")
  movel(p_approach, a = 1.2, v = 0.25,r=0.01)
end

def gripper(action,blocking=True):
  local target_width = gripper_open_width
  if (action == "CLOSE"):
    target_width = gripper_close_width
  elif(action == "OPEN"):
    target_width = gripper_open_width
  end
  if(has_gripper):
   rg_grip(target_width, gripper_force, tool_index = 1, blocking = blocking, depth_comp = False, popupmsg = True)
  else:
    # popup(str_cat("Setting Gripper to: ",target_width),"DEBUG",blocking=True)    
  end
end

def wait_for(ADRESS):
  # while(not read_input_boolean_register(ADRESS) and not request_boolean_from_primary_client("Result Ready")):
  while(not read_input_boolean_register(ADRESS)):
    sync()
  end
end


def inspect():
  local inspec_cnt = 0
  local passed = True
  write_output_boolean_register(INSPECTION_POSITION,False)
  movej(wp_inspection[inspec_cnt])
  while(not is_steady()):
    sync()
  end
  write_output_boolean_register(INSPECTION_POSITION,True)
  
  while(inspec_cnt < length(wp_inspection) and passed):
    # wait for inspection ready
    wait_for(RESULT_READY)
    write_output_boolean_register(INSPECTION_POSITION,False)
    passed = read_input_boolean_register(INSPECTION_RESULT) # or request_boolean_from_primary_client("Test Pass?")
    inspec_cnt = inspec_cnt + 1
    if(passed and inspec_cnt < length(wp_inspection)):
      # write_output_boolean_register(INSPECTION_POSITION,False)
      # move to next position
      movel(wp_inspection[inspec_cnt])
      # Start Inspection
      write_output_boolean_register(INSPECTION_POSITION,True)
    end
  end
  return passed
end


gripper("OPEN",blocking=False)
write_output_boolean_register(INSPECTION_POSITION,False)
write_output_boolean_register(PLOC_DONE,True)


if(PLOC_LOCATED):
  while (cartridgeID < length(points)):
    write_output_integer_register(CURRENT_ID,cartridgeID)
    local pickSuccess = pick_fromInfeed(cartridgeID)
    write_output_boolean_register(INSPECTION_POSITION,False)
    if(rg_Grip_detected and pickSuccess):
      cartridgeCount = cartridgeCount + 1
      write_output_integer_register(CURRENT_CARTRIDGECOUNT,cartridgeCount)

      movej(wp_infeed2inspect_1,r=0.02)
      local testResult = inspect()
      movej(wp_inspect2out_1,r=0.02)
      movej(wp_inspect2out_2,r=0.02)
      place_toOutput(cartridgeID, testResult)
      movej(wp_out2infeed_1,r=0.1)    
    end

    cartridgeID = cartridgeID + 1

  end
end
write_output_boolean_register(PROGRAM_DONE,True)
